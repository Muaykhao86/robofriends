{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js'; // Below \n// A initial state that resets the state at the start of the app\n\nvar initialStateSearch = {\n  searchField: '' // Below \n  // Reducers recieve a state (default= inittial state) and a action(default = empty object) and if \n  // they receive any actions that concerns them, they will act on it and change the state accordingly\n\n};\nexport var searchRobots = function searchRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // Returning a new state Object.assign{}, which will have everything from the state and we\n      // are going to update the searchField Property with action.payload\n      // shorthand alternative...\n      // return {...state, searchField:action.payload}\n      return Object.assign({}, state, {\n        searchField: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\nvar initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\nexport var requestRobots = function requestRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      });\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/danielhardiman/Desktop/web dev/projects/robofriends-clean/src/reducers.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","searchRobots","state","initialState","action","type","Object","assign","payload","initialStateRobots","isPending","robots","error","requestRobots"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,QAIgC,gBAJhC,C,CAMA;AACA;;AACA,IAAMC,kBAAkB,GAAG;AACvBC,EAAAA,WAAW,EAAC,EADW,CAI3B;AACA;AACA;;AAN2B,CAA3B;AAOA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAA1BC,YAA0B;AAAA,MAAZC,MAAY,uEAAL,EAAK;;AAC1D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,mBAAL;AACA;AACA;AACA;AACA;AACA,aAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAACF,QAAAA,WAAW,EAACI,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACA;AACI,aAAON,KAAP;AARR;AAUH,CAXM;AAaP,IAAMO,kBAAkB,GAAG;AACvBC,EAAAA,SAAS,EAAE,KADY;AAEvBC,EAAAA,MAAM,EAAE,EAFe;AAGvBC,EAAAA,KAAK,EAAE;AAHgB,CAA3B;AAMA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAiC;AAAA,MAAhCX,KAAgC,uEAA1BC,YAA0B;AAAA,MAAZC,MAAY,uEAAL,EAAK;;AAC1D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,sBAAL;AACI,aAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAACQ,QAAAA,SAAS,EAAE;AAAZ,OAAzB,CAAP;;AACJ,SAAKb,sBAAL;AACI,aAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBL,KAAjB,EAAwB;AAACS,QAAAA,MAAM,EAAEP,MAAM,CAACI,OAAhB;AAAyBE,QAAAA,SAAS,EAAE;AAApC,OAAxB,CAAP;;AACJ,SAAKZ,qBAAL;AACI,aAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBL,KAAjB,EAAwB;AAACU,QAAAA,KAAK,EAAER,MAAM,CAACI,OAAf;AAAwBE,QAAAA,SAAS,EAAE;AAAnC,OAAxB,CAAP;;AACJ;AACI,aAAOR,KAAP;AARR;AAWH,CAZM","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED} from './constants.js';\n\n// Below \n// A initial state that resets the state at the start of the app\nconst initialStateSearch = {\n    searchField:''\n}\n\n// Below \n// Reducers recieve a state (default= inittial state) and a action(default = empty object) and if \n// they receive any actions that concerns them, they will act on it and change the state accordingly\nexport const searchRobots = (state= initialState, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n        // Returning a new state Object.assign{}, which will have everything from the state and we\n        // are going to update the searchField Property with action.payload\n        // shorthand alternative...\n        // return {...state, searchField:action.payload}\n        return Object.assign({}, state, {searchField:action.payload});\n        default:\n            return state;\n    }\n} \n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialState, action={})=>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state, {error: action.payload, isPending: false})\n        default:\n            return state;\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}