{"ast":null,"code":"import { CHANGE_SEARCH_FIELD } from './constants.js'; // Below \n// A initial state that resets the state at the start of the app\n\nvar initialState = {\n  searchField: '' // Below \n  // Reducers recieve a state and a action and if they receive any actions that concerns them\n  // they will act on it and change the state accordingly\n\n};\nexport var searchRobots = function searchRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // Returning a new state Object.assign{}, which will have everything from the state and we\n      // are going to update the searchField Property with action.payload\n      // shorthand alternative...\n      // return {...state, searchField:action.payload}\n      return Object.assign({}, state, {\n        searchField: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/danielhardiman/Desktop/web dev/projects/robofriends-clean/src/reducers.js"],"names":["CHANGE_SEARCH_FIELD","initialState","searchField","searchRobots","state","action","type","Object","assign","payload"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,gBAApC,C,CAEA;AACA;;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAC,EADK,CAIrB;AACA;AACA;;AANqB,CAArB;AAOA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAA1BH,YAA0B;AAAA,MAAZI,MAAY,uEAAL,EAAK;;AAC1D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,mBAAL;AACA;AACA;AACA;AACA;AACA,aAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACF,QAAAA,WAAW,EAACG,MAAM,CAACI;AAApB,OAAzB,CAAP;;AACA;AACI,aAAOL,KAAP;AARR;AAUH,CAXM","sourcesContent":["import { CHANGE_SEARCH_FIELD } from './constants.js';\n\n// Below \n// A initial state that resets the state at the start of the app\nconst initialState = {\n    searchField:''\n}\n\n// Below \n// Reducers recieve a state and a action and if they receive any actions that concerns them\n// they will act on it and change the state accordingly\nexport const searchRobots = (state= initialState, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n        // Returning a new state Object.assign{}, which will have everything from the state and we\n        // are going to update the searchField Property with action.payload\n        // shorthand alternative...\n        // return {...state, searchField:action.payload}\n        return Object.assign({}, state, {searchField:action.payload});\n        default:\n            return state;\n    }\n} \n\n"]},"metadata":{},"sourceType":"module"}